name: build

on:
    # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
    push:
        branches: [master]

    # Trigger the workflow on any pull request
    pull_request:

    # Support manually running the workflow
    workflow_dispatch:

env:
    GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false -Dkotlin.incremental=false"

jobs:
    build:
        name: Build
        runs-on: macos-latest
        outputs:
            version: ${{ steps.properties.outputs.version }}
            changelog: ${{ steps.properties.outputs.changelog }}

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Validate Gradle Wrapper
              uses: gradle/wrapper-validation-action@v1

            - name: Configure JDK
              uses: actions/setup-java@v2
              with:
                  distribution: 'zulu'
                  java-version: 17

            # Set environment variables
            - name: Export Properties
              id: properties
              shell: bash
              run: |
                  PROPERTIES="$(./gradlew properties --console=plain -q)"
                  VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
                  NAME="$(echo "$PROPERTIES" | grep "^name:" | cut -f2- -d ' ')"
                  CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
                  CHANGELOG="${CHANGELOG//'%'/%25}"
                  CHANGELOG="${CHANGELOG//$'\n'/%0A}"
                  CHANGELOG="${CHANGELOG//$'\r'/%0D}"
                  echo "::set-output name=version::$VERSION"
                  echo "::set-output name=name::$NAME"
                  echo "::set-output name=changelog::$CHANGELOG"

            # Build and run all tests
            - name: Build & Test
              run: ./gradlew build

            # Store the android archive
            - name: Upload the android archive
              uses: actions/upload-artifact@v2.2.4
              with:
                  name: "${{ steps.properties.outputs.name }}.aar (${{ steps.properties.outputs.version }})"
                  path: |
                    ./build/outputs/aar/*release.aar

            # Store the xcframework
            - name: Upload XCFramework
              uses: actions/upload-artifact@v2.2.4
              with:
                  name: "FaithlifeOAuth.xcframework (${{ steps.properties.outputs.version }})"
                  path: |
                    ./build/XCFrameworks/release/

    # Prepare a draft release for GitHub Releases page for the manual verification
    # If accepted and published, release workflow would be triggered
    releaseDraft:
        name: Release Draft
        if: github.event_name != 'pull_request'
        needs: build
        runs-on: macos-latest
        steps:
            # Check out current repository
            - name: Fetch Sources
              uses: actions/checkout@v2.3.4

            # Remove old release drafts by using the curl request for the available releases with draft flag
            - name: Remove Old Release Drafts
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh api repos/{owner}/{repo}/releases \
                    --jq '.[] | select(.draft == true) | .id' \
                    | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

            # Create new release draft - which is not publicly visible and requires manual acceptance
            - name: Create Release Draft
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh release create v${{ needs.build.outputs.version }} \
                    --draft \
                    --title "v${{ needs.build.outputs.version }}" \
                    --notes "${{ needs.build.outputs.changelog }}"
